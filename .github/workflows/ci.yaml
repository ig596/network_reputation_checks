name: CI

on:
  pull_request:

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  commit-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'  # Only validate PRs, not automated commits
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check signed commits in PR
        uses: 1Password/check-signed-commits-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: [commit-validation]
    if: always() && (needs.commit-validation.result == 'success' || github.event_name == 'push')

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --with dev
      - name: Run tests with coverage
        continue-on-error: true
        run: |
          poetry run pytest --cov=network_reputation_check --cov-report=xml --cov-report=term
      - name: Generate and commit coverage badge

        run: |
          poetry run genbadge coverage -i coverage.xml -o coverage.svg
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global commit.gpgsign false
          git add coverage.svg
          if ! git diff --cached --quiet; then
            git commit -m "chore: Update coverage badge [ci skip]" --author="github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
            git push
          else
            echo "No coverage changes to commit"
          fi

  lint:
    runs-on: ubuntu-latest
    needs: [commit-validation]
    if: always() && (needs.commit-validation.result == 'success' || github.event_name == 'push')
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --with dev
      - name: Run pre-commit hooks and commit changes
        continue-on-error: true
        run: |
          poetry run pre-commit run --all-files || echo "Pre-commit hooks modified files."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global commit.gpgsign false  # Disable signing for automated commits
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "chore: Apply pre-commit fixes [ci skip]" --author="github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
            git push
          else
            echo "No changes to commit"
          fi


  validate-docker:
    permissions:
      contents: read  # Restrict permissions to read-only
    runs-on: ubuntu-latest
    needs: [commit-validation]
    if: always() && (needs.commit-validation.result == 'success' || github.event_name == 'push')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Validate build configuration
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: true
        with:
          call: check
