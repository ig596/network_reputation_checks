name: Release Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup | Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Setup | Install Dependencies
        run: |
          pip install poetry
          poetry install --with dev

      - name: Action | Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.0.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions[bot]"
          git_committer_email: "github-actions[bot]@users.noreply.github.com"

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.0.2
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Publish to TestPyPI
        if: steps.release.outputs.released == 'true'
        env:
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish --repository testpypi

      - name: Create convenience Git tags
        if: steps.release.outputs.released == 'true'
        run: |
          # Extract version components for convenience tagging
          VERSION=${{ steps.release.outputs.version }}
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)

          # Create/update convenience tags to match Docker tagging strategy
          git tag -f "v$MAJOR" ${{ steps.release.outputs.tag }}
          git tag -f "v$MAJOR.$MINOR" ${{ steps.release.outputs.tag }}

          # Push convenience tags
          git push origin "v$MAJOR" --force
          git push origin "v$MAJOR.$MINOR" --force

          echo "Created convenience tags: v$MAJOR, v$MAJOR.$MINOR"

  sbom-generation:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      security-events: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.release.outputs.tag }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0.17.6
        with:
          path: .
          artifact-name: sbom.spdx.json
          format: spdx-json
          dependency-snapshot: true
          upload-release-assets: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  docker-artifacts:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: network-reputation-check
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Network Reputation Check Action
            org.opencontainers.image.description=${{ github.event.repository.description }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=network-reputation-check-${{ needs.release.outputs.version }}.tar

      - name: Upload Docker tar to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: network-reputation-check-${{ needs.release.outputs.version }}.tar
          draft: false
          prerelease: false
